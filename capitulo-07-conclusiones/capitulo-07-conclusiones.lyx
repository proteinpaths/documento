#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ../ubcthesis
\use_default_options true
\master ../root.lyx
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Conclusiones
\end_layout

\begin_layout Standard
En este trabajo presentamos un algoritmo de reducción de trayectorias que
 visualmente produce reducciones que logran preservar la dinámica de la
 trayectoria original en cuanto a los eventos principales y la relación
 de tiempo en la que estos ocurren.
 El algoritmo tiene cuatro fases: particionamiento, reducción local, y reducción
 global.
 El algoritmo es altamente configurable, se puede escoger el número de conformac
iones de estructuras de proteínas por partición, el umbral de comparación
 entre dos conformaciones, y el número 
\emph on
K
\emph default
 para seleccionar las más representativas por partición.
 Además, el enfoque de particiones que tiene el algoritmo lo vuelve altamente
 paralelizable ya que cada reducción (local y global) se aplica de forma
 independiente, tanto local como, sobre cada una de ellas.
\end_layout

\begin_layout Standard
Usamos la métrica de TM-score en vez del RMSD para comparar las estructuras
 de proteínas.
 Aunque tradicionalmente se ha usado el RMSD, se conoce muy bien que esta
 métrica es muy sensible a pequeñas diferencias (grupos de átomos) entre
 las estructuras.
 Esas pequeñas diferencias dan como resultado grandes valores de RMSD que
 sugieren que las estructuras comparadas son muy diferentes.
 El TM-score es una métrica más robusta que el RMSD y produce mejores resultados
 a la hora de comparar estructuras de conformaciones muy cercanas, que es
 exactamente lo que se tiene cuando se comparan estructuras de conformaciones
 consecutivas en una línea de tiempo.
\end_layout

\begin_layout Standard
La implementación del algoritmo se realizó en el lenguaje R y Fortran para
 las librerías de agrupamiento y la fácil paralelización de tareas.
 En R están implementados los tres módulos: particionamiento, clustering
 local, y clustering global, mientras que en Fortran está implementada la
 rutina de evaluación del TM-score, que es la que más se llama tanto en
 el agrupamiento rápido de la reducción local, como en el agrupamiento detallado
 de la reducción local.
\end_layout

\begin_layout Standard
En este trabajo se pudo observar que es posible la aplicación de técnicas
 usadas para reducción de secuencias de ADN en la reducción de secuencias
 de proteínas, lo que provee un mecanismo útil a la hora de manejar grandes
 cantidades de información como es el caso de las trayectorias de simulaciones
 de plegamiento de proteínas al ofrecer un subconjunto de la población total
 que resulta significativo en cuanto a las características de las trayectorias
 (como la semejanza de cada conformación respecto a la nativa).
 Esto, por otro lado, facilitó la aplicación de un trabajo anterior sobre
 rasgos conformacionales en un rango más amplio de proteínas, con muchas
 más conformaciones, lo que permitió observar resultados distintos a los
 reportados en dicho trabajo al encontrarse con que estos nuevos conjuntos
 de proteínas presentan 2 estados en lugar de 4.
 Estos resultados fueron contrastados con los encontrados en la literatura
 y pudimos concluir que en ciertas proteínas, la presencia de unicamente
 dos estados es normal.
 Esto sugiere que por tratarse de proteínas pequeñas (30~40 aminoácidos)
 y para las cuales el proceso de plegamiento es muy rápido, estas pasan
 del estado no plegado al plegado sin alcanzar estado intermedios claramente
 visibles.
\end_layout

\begin_layout Standard
Pudimos comprobar además que el uso de aplicaciones virtuales es muy útil
 sobre todo en el campo de la bioinformática.
 Esto porque muchas veces se tienen funcionalidades que son codificadas
 en distintos lenguajes de programación que pueden ser dependientes en su
 compilación de determinados sistemas operativos lo que dificulta su portabilida
d, despliegue y uso.
 Al empaquetar todas estas funcionalidades en una máquina virtual, podemos
 abstraer todos estos detalles y concentrarnos más en la aplicación de dichas
 funcionalidades sobre el problema actual que estemos analizando.
\end_layout

\begin_layout Section
Trabajos Futuros
\end_layout

\begin_layout Subsection
Optimización de la métrica TM-Score
\end_layout

\begin_layout Standard
El algoritmo de reducción de proteínas que proponemos en este trabajo inicia
 con un clustering "rápido" con el cual agrupamos proteínas basándose en
 la métrica TM-Score como medida de similitud.
 Esta métrica ofrece ventajas respecto a otras medidas como el RMSD a la
 hora de capturar las similitudes entre proteínas.
 En general, el algoritmo de TM-Score encuentra regiones comunes entre dos
 estructuras comparando las posiciones cada residuo de la estructura dando
 un mayor peso a los residuos que estén a una distancia más corta de acuedo
 a un umbral determinado, mientra da menos peso a los residuos más distanciados
 lo que hace el algoritmo más sensible a la topología global que a las desviacio
nes de las estructuras locales [
\begin_inset CommandInset citation
LatexCommand cite
key "Zhan2004"
literal "false"

\end_inset

.
 De acuerdo a esto se considera que las dos proteínas son aleatorias o son
 muy diferentes si su puntaje total es menor que 0.17 en un rango de 0 a
 1, o parecidas si pasan de 0.5 en adelante.
\end_layout

\begin_layout Standard
Una forma de adaptar este algoritmo para nuestra evaluación rápida es detener
 el cálculo del puntaje una vez se alcance un valor mayor a 0.5 que es el
 valor para decidir que son proteínas relacionadas, ya que no nos interesa
 el puntaje total sino saber que son suficientemente parecidas.
 Creemos que el tiempo de ejecución del algoritmo al comparar dos estructuras
 se puede reducir a la mitad y por lo tanto el proceso de reducción se puede
 ver impactado grandemente porque es la operación que más se utiliza.
\end_layout

\begin_layout Subsection
Analizar todas las trayectorias de proteínas del conjunto de Anton
\end_layout

\begin_layout Standard
En esta tesis se analizaron solo cuatro trayectorias de proteínas de longitud
 media pero que contienen miles de conformaciones (30000~1000000 conformaciones).
 En ese mismo conjunto existen otras ocho trayectorias que son mucho más
 extensas (> 1000000 conformaciones) y que no las analizamos por falta de
 recursos computacionales.
 Con el flujo de trabajos ya implementado se podría ejecutar el proceso
 de análisis de forma automática para cualquier trayectoria si se garantiza
 los recursos computacionales necesarios para más de un día de procesamiento.
\end_layout

\begin_layout Subsection
Optimizar el multiprocesamiento de los algoritmos
\end_layout

\begin_layout Standard
Todos las implementaciones de los algoritmos utilizan multiprocesamiento
 a través de 
\emph on
multicore, 
\emph default
es decir paralelizan la ejecución usando todos los 
\emph on
core
\emph default
 de la máquina donde se ejecute.
 El grupo de bioinformática tiene un cluster que abarca muchas máquinas
 y cada una de ellas con muchos 
\emph on
cores.

\emph default
 La propuesta es optimizar los algoritmos para que trabajen con el cluster
 y aprovechen todos los 
\emph on
cores
\emph default
 de todas las máquinas.
\end_layout

\end_body
\end_document
